View.getContext(): Returns the context the view is currently running in. Usually the currently active Activity.

Activity.getApplicationContext(): Returns the context for the entire application (the process all the Activities are running inside of). Use this instead of the current Activity context if you need a context tied to the lifecycle of the entire application, not just the current Activity.

ContextWrapper.getBaseContext(): If you need access to a Context from within another context, you use a ContextWrapper. The Context referred to from inside that ContextWrapper is accessed via getBaseContext().


getApplicationContext() - Returns the context for all activities running in application.

getBaseContext() - If you want to access Context from another context within application you can access.

getContext() - Returns the context view only current running activity.



Intent intent = new Intent(getApplicationContext(), LoginActivity.class);
Intent intent = new Intent(MenuPagina., LoginActivity.class);
Intent intent = new Intent(getBaseContext(), LoginActivity.class);
Intent intent = new Intent(getApplication(), LoginActivity.class);


getApplication() though its referring to Application object but the Application class extends Context class, so it can be used to offer application context.

getApplicationContext() offers application context.

getBaseContext() offers activity context.


The answer by Waqas is very clear and complete, however I'd like to further clarify the difference between using 'this' vs. getBaseContext(), or getApplication() vs. getApplicationContext(). Both Activity and Application extend not Context itself, but ContextWrapper, which is a "Proxying implementation of Context that simply delegates all of its calls to another Context". That "real" context is what you get by using getBaseContext().

So although 'this' (for Activity) and getBaseContext() both give the activity context, they (a) do not refer to the same object (this != getBaseContext()) and (b) calling context through 'this' is slightly less efficient, as the calls go through an extra level of indirection. I doubt it makes any practical difference, though.

The same logic applies to getApplication() vs. getApplicationContext().

shareimprove this answer
answered Nov 23 '12 at 7:13

AlexR
30947
  	 	


getApplication()
Same here the make text method needs Context and Application itself implements Context

getApplicationContext()
this is most preferred way since this Context lives untill Application shuts down.

getBaseContext()
this Context is available to widgets and Views..
